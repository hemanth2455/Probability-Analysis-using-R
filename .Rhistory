# Basic arithmetic operations
9 / 44
0.6 * 0.4 + 0.3 * 0.6
log(0.6 * 0.4 + 0.3 * 0.6)
# Creating a vector and performing operations
x <- 1:40
x^2
sum(x^2)
# Computing factorials and binomial coefficients
prod(1:10)  # 10!
prod(1:10) / (prod(1:4) * prod(1:6))  # (10 choose 4)
# Using logarithms to handle large numbers
logb <- sum(log(1:200)) - sum(log(1:4)) - sum(log(1:196))
exp(logb)  # Result of (200 choose 4)
# Built-in function for binomial coefficients
choose(200, 4)
choose(10, 0:10)
choose(10:20, 4)
choose(2:15, 0:13)
# Sample space Ω
Ω <- c("a", "b", "c", "d", "e")
# Events
E1 <- c("a", "b", "e")
E2 <- c("b", "c")
# Other subsets that must be events
# Unions, intersections, and complements
events <- list(
union_E1_E2 = union(E1, E2),
intersection_E1_E2 = intersect(E1, E2),
complement_E1 = setdiff(Ω, E1),
complement_E2 = setdiff(Ω, E2)
)
events
#### *Exercise 1.1.2*
R
# Sample space S for the restaurant positions
S <- c("David_Cashier", "David_Waiter", "Rajesh_Cashier", "Rajesh_Waiter",
"Veronica_Cashier", "Veronica_Waiter", "Megha_Cashier", "Megha_Waiter")
# Event A: Cashier is a female applicant
A <- c("Veronica_Cashier", "Megha_Cashier")
# Event B: Exactly one position is filled by a female applicant
B <- c("David_Cashier", "Rajesh_Waiter", "Veronica_Cashier", "Megha_Waiter")
# Event C: Neither position is filled by a female applicant
C <- c("David_Cashier", "Rajesh_Waiter")
# Display the events
list(S = S, A = A, B = B, C = C)
#### *Exercise 1.1.3*
R
# Sample space for marble draws
# Assuming Rn and Gn are defined for red and green draws
# Example for the first draw being white
W1 <- setdiff(Ω, union(R1, G1))
# First marble drawn is green and second is not white
G1_not_W2 <- intersect(G1, setdiff(Ω, W2))
# First and second draws are different colors
different_colors <- union(intersect(R1, G2), intersect(G1, R2))
# Display results
list(W1 = W1, G1_not_W2 = G1_not_W2, different_colors = different_colors)
#### *Exercise 1.1.4*
R
# Probabilities for World Cup teams
teams <- c("Spain" = 0.14, "Netherlands" = 0.11, "Germany" = 0.11,
"Italy" = 0.10, "Brazil" = 0.10, "England" = 0.09,
"Argentina" = 0.09, "Russia" = 0.07, "France" = 0.06,
"Turkey" = 0.04, "Paraguay" = 0.04, "Croatia" = 0.04,
"Portugal" = 0.01)
# South American countries
south_american_teams <- c("Brazil", "Argentina", "Paraguay")
# Probability of winning by a South American country
P_SA <- sum(teams[south_american_teams])
# Probability of winning by a non-South American country
P_non_SA <- 1 - P_SA
list(P_SA = P_SA, P_non_SA = P_non_SA)
#### *Exercise 1.1.5*
R
# Given probabilities
P_A <- 0.3
P_B <- 0.6
# P(A ∪ B) for disjoint events
P_A_union_B <- P_A + P_B
# P(A c) and P(A c ∩ B)
P_A_c <- 1 - P_A
P_A_c_intersection_B <- P_B  # Since A and B are disjoint
list(P_A_union_B = P_A_union_B, P_A_c = P_A_c, P_A_c_intersection_B = P_A_c_intersection_B)
#### *Exercise 1.1.6*
R
# Given probabilities
P_E <- 0.7
P_F <- 0.5
# Largest possible value of P(E ∩ F)
max_P_E_intersection_F <- min(P_E, P_F)
# Smallest possible value of P(E ∩ F)
min_P_E_intersection_F <- max(0, P_E + P_F - 1)
# If A and B are independent
independent_P_E_intersection_F <- P_E * P_F
list(max_P_E_intersection_F = max_P_E_intersection_F,
min_P_E_intersection_F = min_P_E_intersection_F,
independent_P_E_intersection_F = independent_P_E_intersection_F)
#### *Exercise 1.1.7*
R
# Given probabilities
P_E <- 0.86  # Over 150 egg masses
P_F <- 0.64  # Over 17 inches of precipitation
P_E_intersection_F <- 0.59  # Given
# Event for 150 or fewer egg masses
P_E_c_intersection_F <- P_F - P_E_intersection_F
list(P_E_c_intersection_F = P_E_c_intersection_F)
#### *Exercise 1.2.1*
R
# Sample space for days of the week
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# Size of sample space
size_S <- length(days)
# Event E: Selected day is Saturday or Sunday
E <- c("Saturday", "Sunday")
P_E <- length(E) / size_S
list(S = days, size_S = size_S, P_E = P_E)
#### *Exercise 1.2.2*
R
# Sample space for envelopes
total_envelopes <- 500
envelopes <- c(rep(100, 50), rep(50, 100), rep(10, 350))
# Probability of selecting an envelope with less than Rs 100
P_less_than_100 <- (100 + 350) / total_envelopes  # Rs 50 and Rs 10 envelopes
P_less_than_100
#### *Exercise 1.2.3*
R
# Sample space for three dice
S <- expand.grid(1:6, 1:6, 1:6)
# Size of sample space
size_S <- nrow(S)
# Event E: First two dice show "1"
E <- S[S[, 1] == 1 & S[, 2] == 1, ]
# Size of event E
size_E <- nrow(E)
P_E <- size_E / size_S
list(size_S = size_S, size_E = size_E, P_E = P_E)
#### *Exercise 1.2.4*
R
# Probability space for hat selection
# Each woman has a hat, and they select randomly
# Total arrangements
total_arrangements <- factorial(3)
# Event: None selects her own hat (derangement)
# Using the formula for derangements
derangements <- function(n) {
if (n == 0) return(1)
if (n == 1) return(0)
if (n == 2) return(1)
return((n - 1) * (derangements(n - 1) + derangements(n - 2)))
}
P_none_select_own_hat <- derangements(3) / total_arrangements
P_none_select_own_hat
#### *Exercise 1.2.5*
R
# Group of ten people including Sona and Adam
total_people <- 10
group_size <- 5
# Ways to choose 5 people excluding Sona and Adam
ways_excluding_Sona_Adam <- choose(total_people - 2, group_size)
# Total ways to choose any 5 people
total_ways <- choose(total_people, group_size)
# Probability
P_excluding_Sona_Adam <- ways_excluding_Sona_Adam / total_ways
P_excluding_Sona_Adam
#### *Exercise 1.2.6*
R
# Eight students: 2 females, 6 males
total_students <- 8
group_size <- 4
# Total ways to split into two groups of 4
total_ways <- choose(total_students, group_size)
# (a) Ways to have 2 females in group A
ways_2_females_A <- choose(2, 2) * choose(6, 2)  # All females in A
# (b) Ways to have 1 female in each group
ways_1_female_each <- choose(2, 1) * choose(6, 3)
# Probabilities
P_2_females_A <- ways_2_females_A / total_ways
P_1_female_each <- ways_1_female_each / total_ways
list(P_2_females_A = P_2_females_A, P_1_female_each = P_1_female_each)
#### *Exercise 1.2.7*
R
# Sample space for key attempts
keys <- 1:50  # 50 keys
# Each outcome is equally likely
# Realistic assumption
realistic <- TRUE  # Assuming all keys have an equal chance
realistic
#### *Exercise 1.2.8*
R
# Probability that all red balls are next to each other
# Assuming n balls, k red balls
n <- 10  # Total balls
k <- 3   # Red balls
# Arrangements
arrangements <- factorial(n - k + 1) * factorial(k)  # Treat red as one block
total_arrangements <- factorial(n)
P_all_red_together <- arrangements / total_arrangements
P_all_red_together
#### *Exercise 1.2.9*
R
# Deck of 50 cards
total_cards <- 50
identical_color_hands <- choose(10, 5)  # Hands of identical color
# Total hands
total_hands <- choose(total_cards, 5)
# Probability
P_identical_color_hand <- identical_color_hands / total_hands
P_identical_color_hand
#### *Exercise 1.2.10*
R
# Quality control for light bulbs
total_bulbs <- 100
good_bulbs <- 80
bad_bulbs <- 20
# Probability of detecting bad bulbs
P_detect_bad <- choose(bad_bulbs, 1) / choose(total_bulbs, 10)
P_detect_bad
#### *Exercise 1.2.11*
R
# Rolling a fair die five times
# Probability of at least two 5's and at least two 6's
# Using binomial distribution
p_5 <- 1/6
p_6 <- 1/6
# Probability of getting at least two 5's and at least two 6's
P_at_least_2_5s_2_6s <- 1 - (dbinom(0, 5, p_5) + dbinom(1, 5, p_5)) * (dbinom(0, 5, p_6) + dbinom(1, 5, p_6))
P_at_least_2_5s_2_6s
#### *Exercise 1.2.12*
R
# Birthday Problem for N people
birthday_prob <- function(N) {
days <- 365
prob_no_shared <- 1
for (i in 0:(N-1)) {
prob_no_shared <- prob_no_shared * (days - i) / days
}
return(1 - prob_no_shared)  # Probability of at least one shared birthday
}
# Calculate probabilities for different group sizes
group_sizes <- c(2, 3, 4)
sapply(group_sizes, birthday_prob)
#### *Exercise 1.2.13*
R
# Coin tossed 100 times
# (a) Probability of exactly 50 heads and 50 tails
P_exactly_50_heads <- choose(100, 50) * (0.5^100)
# (b) Probability of heads between 50 and 55
P_between_50_55 <- sum(sapply(50:55, function(k) choose(100, k) * (0.5^100)))
P_between_50_55
#### *Exercise 1.2.14*
R
# Coin flipped 20 times
# (a) Probability of exactly 16 heads
P_exactly_16_heads <- choose(20, 16) * (0.5^20)
# (b) Probability of at least 16 heads
P_at_least_16_heads <- sum(sapply(16:20, function(k) choose(20, k) * (0.5^20)))
P_at_least_16_heads
#### *Exercise 1.2.15*
R
# Indistinguishable balls in distinguishable boxes
# Probability that no box will be empty
# Using the principle of inclusion-exclusion
n <- 10  # Total balls
k <- 5   # Total boxes
# Total arrangements
total_arrangements <- factorial(n)
# Arrangements with at least one box empty
empty_arrangements <- choose(k, 1) * factorial(n - 1)
# Probability
P_no_empty_boxes <- (total_arrangements - empty_arrangements) / total_arrangements
P_no_empty_boxes
### *Conclusion*
These R scripts provide a comprehensive approach to solving the exercises presented in the document. You can run these scripts in the R environment to verify the results and further explore the concepts discussed.
# Basic arithmetic operations
9 / 44
0.6 * 0.4 + 0.3 * 0.6
log(0.6 * 0.4 + 0.3 * 0.6)
# Creating a vector and performing operations
x <- 1:40
x^2
sum(x^2)
# Computing factorials and binomial coefficients
prod(1:10)  # 10!
prod(1:10) / (prod(1:4) * prod(1:6))  # (10 choose 4)
# Using logarithms to handle large numbers
logb <- sum(log(1:200)) - sum(log(1:4)) - sum(log(1:196))
exp(logb)  # Result of (200 choose 4)
# Built-in function for binomial coefficients
choose(200, 4)
choose(10, 0:10)
choose(10:20, 4)
choose(2:15, 0:13)
### *Exercises*
#### *Exercise 1.1.1*
R
